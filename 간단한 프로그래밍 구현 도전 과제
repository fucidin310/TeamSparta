#include <iostream>
using namespace std;

void Merge_AscendingOrder(int arr[], int left, int mid, int right) {
	int* tempArr = new int[right - left];

	int firstPointer = left;
	int secondPointer = mid + 1;
	int tempIndex = 0;

	while (firstPointer <= mid && secondPointer <= right)
	{
		if (arr[firstPointer] < arr[secondPointer]) {
			tempArr[tempIndex] = arr[firstPointer];
			firstPointer++;
		}
		else {
			tempArr[tempIndex] = arr[secondPointer];
			secondPointer++;
		}

		tempIndex++;
	}

	while (firstPointer <= mid)
	{
		tempArr[tempIndex] = arr[firstPointer];
		firstPointer++;
		tempIndex++;
	}

	while (secondPointer <= right)
	{
		tempArr[tempIndex] = arr[secondPointer];
		secondPointer++;
		tempIndex++;
	}

	int k = 0;
	for (int i = left; i <= right; i++) {
		arr[i] = tempArr[k];
		k++;
	}
}

void MergeSort_AscendingOrder(int arr[], int start, int end) {
	if (start >= end) return;

	int mid = start + (end - start) / 2;

	MergeSort_AscendingOrder(arr, start, mid);
	MergeSort_AscendingOrder(arr, mid + 1, end);

	Merge_AscendingOrder(arr, start, mid, end);
}

void Merge_DescendingOrder(int arr[], int left, int mid, int right) {
	int* tempArr = new int[right - left];

	int firstPointer = left;
	int secondPointer = mid + 1;
	int tempIndex = 0;

	while (firstPointer <= mid && secondPointer <= right)
	{
		if (arr[firstPointer] > arr[secondPointer]) {
			tempArr[tempIndex] = arr[firstPointer];
			firstPointer++;
		}
		else {
			tempArr[tempIndex] = arr[secondPointer];
			secondPointer++;
		}

		tempIndex++;
	}

	while (firstPointer <= mid)
	{
		tempArr[tempIndex] = arr[firstPointer];
		firstPointer++;
		tempIndex++;
	}

	while (secondPointer <= right)
	{
		tempArr[tempIndex] = arr[secondPointer];
		secondPointer++;
		tempIndex++;
	}

	int k = 0;
	for (int i = left; i <= right; i++) {
		arr[i] = tempArr[k];
		k++;
	}
}

void MergeSort_DescendingOrder(int arr[], int start, int end) {
	if (start >= end) return;

	int mid = start + (end - start) / 2;

	MergeSort_DescendingOrder(arr, start, mid);
	MergeSort_DescendingOrder(arr, mid + 1, end);

	Merge_DescendingOrder(arr, start, mid, end);
}

int main() {	
	int Num[5];

	cout << "숫자를 입력하세요 : ";
	for (int i = 0; i < 5; i++) {
		cin >> Num[i];
	}

	MergeSort_AscendingOrder(Num, 0, 4);

	cout << "\n오름차순 정렬 : ";
	for (int i = 0; i < 5; i++) {
		cout << Num[i] << " ";
	}

	MergeSort_DescendingOrder(Num, 0, 4);

	cout << "\n내림차순 정렬 : ";
	for (int i = 0; i < 5; i++) {
		cout << Num[i] << " ";
	}
}
